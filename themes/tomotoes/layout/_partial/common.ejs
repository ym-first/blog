<script>
    function timeDifference(current, previous) {
		var msPerMinute = 60 * 1000;
		var msPerHour = msPerMinute * 60;
		var msPerDay = msPerHour * 24;
		var msPerMonth = msPerDay * 30;
		var msPerYear = msPerDay * 365;

		var elapsed = current - previous;
		let relativeTime;
		if (elapsed < msPerMinute) {
			relativeTime = Math.round(elapsed/1000);
			return relativeTime>1?relativeTime+ ' seconds ago':relativeTime+' second ago';   
		}

		else if (elapsed < msPerHour) {
			relativeTime = Math.round(elapsed/msPerMinute);
			return relativeTime>1?relativeTime+ ' minutes ago':relativeTime+' minute ago';
		}

		else if (elapsed < msPerDay ) {
			relativeTime = Math.round(elapsed/msPerHour);
			return relativeTime>1?relativeTime+ ' hours ago':relativeTime+' hour ago';
		}

		else if (elapsed < msPerMonth) {
			relativeTime = Math.round(elapsed/msPerDay)
			return relativeTime>1?relativeTime+ ' days ago':relativeTime+' day ago';
		}

		else if (elapsed < msPerYear) {
			relativeTime = Math.round(elapsed/msPerMonth);
			return relativeTime>1?relativeTime+ ' months ago':relativeTime+' month ago';
		}

		else {
			relativeTime = Math.round(elapsed/msPerYear);
			return relativeTime>1?relativeTime+ ' years ago':relativeTime+' year ago';
		}
		}

        async function graphql4issues(){
		const axiosin = axios.create({
			"headers": {
			"accept": "application/json",
			"authorization": "bearer ".concat(rt),
			"content-type": "application/json;charset=UTF-8",
			} });
		res = await axiosin.post("https://api.github.com/graphql", "{\"operationName\":\"getIssues\",\"query\":\"\\n  query getIssues($owner: String!, $repo: String!, $cursor: String, $pageSize: Int!) {\\n    repository(owner: $owner, name: $repo) {\\n      issues(first: $pageSize, after: $cursor, orderBy: {field: CREATED_AT, direction: DESC}, filterBy: {createdBy: $owner, states: OPEN}) {\\n        pageInfo {\\n          hasNextPage\\n          endCursor\\n        }\\n        nodes {\\n          id\\n          number\\n          createdAt\\n          bodyHTML\\n          comments(first: 1) {\\n            totalCount\\n          }\\n          labels(first: 1) {\\n            nodes {\\n              name\\n              color\\n            }\\n          }\\n        }\\n      }\\n    }\\n  }\\n  \",\"variables\":{\"owner\":\"ym-first\",\"repo\":\"ymBlog\",\"pageSize\":6}}",);
		nodeInfo = res.data["data"]["repository"]["issues"]["nodes"];
		sessionStorage.setItem("ISSUES-NODES",JSON.stringify(nodeInfo));
		return res;
	}
</script>
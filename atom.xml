<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>M.Y_敏兒</title>
  
  <subtitle>True nobility is being superior to your former self.</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://ym-first.github.io/blog/"/>
  <updated>2020-04-11T01:22:56.889Z</updated>
  <id>https://ym-first.github.io/blog/</id>
  
  <author>
    <name>M.Y_敏兒</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Dubbo接口测试</title>
    <link href="https://ym-first.github.io/blog/posts/81c88605/"/>
    <id>https://ym-first.github.io/blog/posts/81c88605/</id>
    <published>2020-04-03T05:30:40.000Z</published>
    <updated>2020-04-11T01:22:56.889Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/blog/assets/css/APlayer.min.css"><script src="/blog/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="如何测试dubbo接口："><a href="#如何测试dubbo接口：" class="headerlink" title="如何测试dubbo接口："></a>如何测试dubbo接口：</h1><h2 id="Python"><a href="#Python" class="headerlink" title="Python:"></a><strong>Python:</strong></h2><h3 id="1-hessian-http的方式调用-python-hessian库"><a href="#1-hessian-http的方式调用-python-hessian库" class="headerlink" title="1. hessian+http的方式调用(python-hessian库):"></a>1. <strong>hessian+http的方式调用(python-hessian库):</strong></h3><a id="more"></a><ul><li><p>(1) dubbo项目中，增加hessian方式序列化，及相关依赖。下图为xml配置方式示例。</p><ul><li><a href="https://dubbo.apache.org/zh-cn/docs/user/references/protocol/hessian.html" target="_blank" rel="noopener">官方配置hessian协议及依赖例子</a></li><li><a href="https://dubbo.apache.org/zh-cn/docs/user/demos/multi-protocols.html" target="_blank" rel="noopener">官方配置多协议例子</a><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://tva1.sinaimg.cn/large/00831rSTgy1gdboopoouuj30po0h5dif.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></li></ul></li><li><p>(2) 获取接口地址（可在管理台查看）、方法及方法的入参。</p></li><li><p>(3) 安装 python-hessian               </p>  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m pip install python-hessian</span><br></pre></td></tr></tbody></table></figure></li><li><p>(4) 编写Python脚本调用接口; <a href="https://github.com/theatlantic/python-hessian/blob/master/README.rst" target="_blank" rel="noopener">pyhessian官方调用例子</a></p>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"><span class="keyword">from</span> pyhessian.client <span class="keyword">import</span> HessianProxy</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestDubbo</span><span class="params">(object)</span>:</span></span><br><span class="line">    url = <span class="string">"http://169.254.210.145:1234/"</span></span><br><span class="line">    interface = <span class="string">"com.xxx.user.service.UserService"</span></span><br><span class="line">    full_url = url + interface</span><br><span class="line">    <span class="comment"># full_url = "http://169.254.210.145:8888/com.xxx.user.service.FileService"</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">testsayHelloWithSpec</span><span class="params">(self)</span>:</span></span><br><span class="line">        params = <span class="string">u"什么我调用成功了吗"</span></span><br><span class="line">        <span class="comment"># 创建连接对象</span></span><br><span class="line">        service = HessianProxy(self.full_url)</span><br><span class="line">        <span class="comment"># 重载方法__call()__里发送二进制数据进行请求，调用方法</span></span><br><span class="line">        res = service.sayHello(params)</span><br><span class="line">        <span class="keyword">assert</span> <span class="string">"什么我调用成功了吗"</span> <span class="keyword">in</span> res</span><br><span class="line">        print(res)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># @pytest.mark.skip()</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">testsayHelloWithInt</span><span class="params">(self)</span>:</span></span><br><span class="line">        params = <span class="number">123</span></span><br><span class="line">        service = HessianProxy(self.full_url)</span><br><span class="line">        res = service.sayHello(params)</span><br><span class="line">        <span class="keyword">assert</span> <span class="number">123</span> <span class="keyword">in</span> res</span><br><span class="line">        print(res)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    pytest.main([<span class="string">"-q"</span>,<span class="string">"TestDubbo.py"</span>])</span><br></pre></td></tr></tbody></table></figure></li></ul><h3 id="2-使用dubbo-client"><a href="#2-使用dubbo-client" class="headerlink" title="2. 使用dubbo-client"></a>2. <strong>使用dubbo-client</strong></h3><ul><li>dubbo项目中，provicer.xml 增加 jsonrpc 协议</li><li><a href="https://github.com/dubbo/dubbo-client-py" target="_blank" rel="noopener">官方地址</a><br><a href="https://www.twblogs.net/a/5d4061a4bd9eee51fbf993e7/zh-cn" target="_blank" rel="noopener">其他参考示例</a>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">config = ApplicationConfig(<span class="string">'test_rpclib'</span>)</span><br><span class="line">service_interface = <span class="string">'com.ofpay.demo.api.UserProvider'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Contains a connection to zookeeper, which needs caching.</span></span><br><span class="line">registry = ZookeeperRegistry(<span class="string">'192.168.59.103:2181'</span>, config)</span><br><span class="line">user_provider = DubboClient(service_interface, registry, version=<span class="string">'1.0'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">print</span> user_provider.getUser(<span class="string">'A003'</span>)</span><br><span class="line">        <span class="keyword">print</span> user_provider.queryUser(</span><br><span class="line">            {<span class="string">u'age'</span>: <span class="number">18</span>, <span class="string">u'time'</span>: <span class="number">1428463514153</span>, <span class="string">u'sex'</span>: <span class="string">u'MAN'</span>, <span class="string">u'id'</span>: <span class="string">u'A003'</span>, <span class="string">u'name'</span>: <span class="string">u'zhangsan'</span>})</span><br><span class="line">        <span class="keyword">print</span> user_provider.queryAll()</span><br><span class="line">        <span class="keyword">print</span> user_provider.isLimit(<span class="string">'MAN'</span>, <span class="string">'Joe'</span>)</span><br><span class="line">        <span class="keyword">print</span> user_provider(<span class="string">'getUser'</span>, <span class="string">'A005'</span>)</span><br><span class="line">    <span class="keyword">except</span> DubboClientError, client_error:</span><br><span class="line">        <span class="keyword">print</span> client_error</span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br></pre></td></tr></tbody></table></figure></li></ul><h2 id="java"><a href="#java" class="headerlink" title="java:"></a><strong>java:</strong></h2><h3 id="1-XML配置文件方式"><a href="#1-XML配置文件方式" class="headerlink" title="1. XML配置文件方式:"></a>1. <strong>XML配置文件方式:</strong></h3><ul><li>拿到服务的jar包或maven依赖</li><li>在resources下创建consumer.xml,配置好注册中心地址,接口名全称(有包名限定),每个接口有其唯一的标识reference id</li><li>调用测试方法中,使用springframework提供的方法加载consumer.xml配置文件,得到context对象,调用start方法启动</li><li>调用context对象的getBean方法,传入接口标识作为实参,获取接口的具体实现对象,这步会进行远程过程调用</li><li>通过获取的对象调用其提供的方法  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.xxx.user.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.junit.BeforeClass;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.hamcrest.CoreMatchers.containsString;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.assertThat;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerTest</span> </span>{</span><br><span class="line">    <span class="keyword">static</span> ClassPathXmlApplicationContext context;</span><br><span class="line">    <span class="keyword">static</span> UserService userService;</span><br><span class="line">    <span class="meta">@BeforeClass</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">beforeClass</span><span class="params">()</span></span>{</span><br><span class="line">         <span class="keyword">if</span>(context==<span class="keyword">null</span>) {</span><br><span class="line">             <span class="comment">// 默认从类路径中加载配置文件</span></span><br><span class="line">             context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"consumer.xml"</span>);</span><br><span class="line">             System.out.println(<span class="string">"load"</span>);</span><br><span class="line">             <span class="comment">// 在Spring中还提供了Lifecycle接口，Lifecycle中包含start/stop方法，实现此接口后Spring保证在启动的时候调用其start方法开始生命周期,主要用于控制异步处理过程</span></span><br><span class="line">            context.start();</span><br><span class="line"><span class="comment">//            System.out.println("start");</span></span><br><span class="line">         }</span><br><span class="line">　　　　　　 <span class="comment">// 创建接口实例（定义接口的引用变量，再引用实现了该接口的实例）</span></span><br><span class="line">        userService=(UserService) context.getBean(<span class="string">"userService"</span>);</span><br><span class="line"></span><br><span class="line">     }</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">consumerTestCase1</span><span class="params">()</span></span>{</span><br><span class="line">　　　　　　 <span class="comment">// 调用方法</span></span><br><span class="line">         String hello = userService.sayHello(<span class="string">"world"</span>);</span><br><span class="line">         assertThat(hello,containsString(<span class="string">"world"</span>);</span><br><span class="line">         System.out.println(hello);</span><br><span class="line">     }</span><br><span class="line"> }</span><br></pre></td></tr></tbody></table></figure></li></ul><h3 id="2-API方式的泛化调用"><a href="#2-API方式的泛化调用" class="headerlink" title="2. API方式的泛化调用:"></a>2. <strong>API方式的泛化调用:</strong></h3><ul><li>不需要获取被测接口的jar包或依赖</li><li><a href="http://dubbo.apache.org/zh-cn/blog/dubbo-generic-invoke.html" target="_blank" rel="noopener">官方示例1</a> <br> <a href="http://dubbo.apache.org/zh-cn/docs/user/demos/generic-reference.html" target="_blank" rel="noopener">官方示例2</a></li><li>创建连接实例:<ul><li>使用 org.apache.dubbo.config.ApplicationConfig 配置消费者应用名</li><li>使用 org.apache.dubbo.config.ReferenceConfig; 创建reference配置实例,设置接口全类名,声明泛化调用,配置消费者</li><li>使用org.apache.dubbo.config.RegistryConfig; 配置注册中心地址</li><li>调用reference配置实例的get方法,获取GenericService类型的连接实例</li></ul></li><li>调用服务提供的方法:<ul><li>调用org.apache.dubbo.rpc.service.GenericService 这个接口名为 $invoke方法，它接受三个参数，分别为方法名、方法参数类型数组和参数值数组；<ul><li>对于方法参数类型数组:<ul><li>如果是基本类型，如 int 或 long，可以使用 int.class.getName()获取其类型；</li><li>如果是基本类型数组，如 int[]，则可以使用 int[].class.getName()；</li><li>如果是 POJO，则直接使用全类名，如 com.alibaba.dubbo.samples.generic.api.Params。</li></ul></li><li>参数值数组:<ul><li>如果是POJO,则转成Map,再将转换后的Map作为参数传入<figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>{</span><br><span class="line">    ApplicationConfig application = <span class="keyword">new</span> ApplicationConfig();</span><br><span class="line">    application.setName(<span class="string">"api-generic-consumer"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用RegistryConfig,动态配置注册中心地址</span></span><br><span class="line">    RegistryConfig registry = <span class="keyword">new</span> RegistryConfig();</span><br><span class="line">    registry.setAddress(<span class="string">"zookeeper://127.0.0.1:2181"</span>);</span><br><span class="line">    application.setRegistry(registry);</span><br><span class="line"></span><br><span class="line">    ReferenceConfig&lt;GenericService&gt; reference = <span class="keyword">new</span> ReferenceConfig&lt;GenericService&gt;();</span><br><span class="line">    <span class="comment">// 弱类型接口名</span></span><br><span class="line">    reference.setInterface(<span class="string">"com.ymxdclass.user.service.UserService"</span>);</span><br><span class="line">    <span class="comment">// 声明为泛化接口</span></span><br><span class="line">    reference.setGeneric(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    reference.setApplication(application);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用com.alibaba.dubbo.rpc.service.GenericService可以替代所有接口引用</span></span><br><span class="line">    GenericService genericService = reference.get();</span><br><span class="line"></span><br><span class="line">    String name = (String) genericService.$invoke("sayHello", new String[]{String.class.getName()}, new Object[]{"who am i"});</span><br><span class="line">    System.out.println(name);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul></li></ul></li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;如何测试dubbo接口：&quot;&gt;&lt;a href=&quot;#如何测试dubbo接口：&quot; class=&quot;headerlink&quot; title=&quot;如何测试dubbo接口：&quot;&gt;&lt;/a&gt;如何测试dubbo接口：&lt;/h1&gt;&lt;h2 id=&quot;Python&quot;&gt;&lt;a href=&quot;#Python&quot; class=&quot;headerlink&quot; title=&quot;Python:&quot;&gt;&lt;/a&gt;&lt;strong&gt;Python:&lt;/strong&gt;&lt;/h2&gt;&lt;h3 id=&quot;1-hessian-http的方式调用-python-hessian库&quot;&gt;&lt;a href=&quot;#1-hessian-http的方式调用-python-hessian库&quot; class=&quot;headerlink&quot; title=&quot;1. hessian+http的方式调用(python-hessian库):&quot;&gt;&lt;/a&gt;1. &lt;strong&gt;hessian+http的方式调用(python-hessian库):&lt;/strong&gt;&lt;/h3&gt;
    
    </summary>
    
    
      <category term="接口测试" scheme="https://ym-first.github.io/blog/categories/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="测试" scheme="https://ym-first.github.io/blog/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>ym</title>
    <link href="https://ym-first.github.io/blog/posts/8c27cda5/"/>
    <id>https://ym-first.github.io/blog/posts/8c27cda5/</id>
    <published>2020-03-12T08:00:33.000Z</published>
    <updated>2020-04-09T07:14:46.344Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/blog/assets/css/APlayer.min.css"><script src="/blog/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="欢迎访问"><a href="#欢迎访问" class="headerlink" title="欢迎访问"></a>欢迎访问</h1><h2 id="需要您重点注意的"><a href="#需要您重点注意的" class="headerlink" title="需要您重点注意的!"></a>需要您重点注意的!</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/blog/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/blog/assets/js/APlayer.m
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Dubbo接口框架相关概念</title>
    <link href="https://ym-first.github.io/blog/posts/f0c13426/"/>
    <id>https://ym-first.github.io/blog/posts/f0c13426/</id>
    <published>2020-03-12T03:11:30.000Z</published>
    <updated>2020-04-09T01:30:52.312Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/blog/assets/css/APlayer.min.css"><script src="/blog/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="关于dubbo："><a href="#关于dubbo：" class="headerlink" title="关于dubbo："></a><strong>关于dubbo</strong>：</h1><h2 id="why"><a href="#why" class="headerlink" title="why:"></a>why:</h2><ul><li><p>为了解决,随着互联网发展,而日益增长的业务复杂度,网站应用规模不断扩大,且常规的垂直应用架构也无法应付,而提出的解决方案.</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://tva1.sinaimg.cn/large/00831rSTgy1gdbnrp2sl3j30jg05u3z5.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p></p><a id="more"></a><h3 id="1-架构发展角度"><a href="#1-架构发展角度" class="headerlink" title="1. 架构发展角度:"></a>1. 架构发展角度:</h3></li><li><p>单一应用架构</p><ul><li><p>网站流量很小时,将所有功能都部署在一个应用,节省部署节点和成本.此时,重点是简化增删改查工作量的数据访问框架ORM</p><img src="https://tva1.sinaimg.cn/large/00831rSTgy1gdbnsa0v00j310w0cgn0z.jpg" width="70%">(图源https://www.jianshu.com/p/92ca0bfbd52f)<img src="https://tva1.sinaimg.cn/large/00831rSTgy1gdbnsx15sdj30su0yg46t.jpg" width="60%" height="10%"></li><li><p>单体架构相关资料:</p><ul><li><p>单体架构指应用代码都作为同一个进程,部署和运行在单一节点中.</p><ul><li><p>单一节点服务器中,整体中的所有的模块都组装到单一的内存镜像中,作为一个进程运行在单一节点上.</p></li><li><p>其中,如果将应用程序部署到多个服务器（如在水平扩展上下文中），它仍然是一个整体。</p>  <img src="https://tva1.sinaimg.cn/large/00831rSTgy1gdbo2vsnw7j30g80jqtiq.jpg" width="50%"></li></ul></li><li><p><a href="https://herbertograca.com/2017/07/31/monolithic-architecture/" target="_blank" rel="noopener">单体架构参考资料1</a> <a href="https://sunnycoding.cn/2018/07/28/monolithic-and-microservices-part1/" target="_blank" rel="noopener">单体架构参考资料2</a> <a href="https://microservices.io/patterns/monolithic.html" target="_blank" rel="noopener">单体架构参考资料3</a></p></li></ul></li></ul></li><li><p>垂直应用架构</p><ul><li>访问量逐渐增大,单一应用增加机器(通过在负载均衡器后端运行多个拷贝，实现多个扩展)带来的加速度越来越小,于是需要将应用拆成互不相干的几个应用来提升效率,此时的重点是用于加速前端页面开发的Web框架(MVC).</li></ul></li><li><p>分布式服务架构</p><ul><li>为了应对增长的业务量,一台机器的性能已经无法满足,需要多台机器才能应对大规模的应用场景,同时也为了提高整个系统架构的可用性,消除单点故障,而垂直或水平拆分业务系统为多个应用.</li><li>当垂直应用越来越多,应用之间需要交互,将核心业务抽取出来,作为独立的服务,逐渐形成稳定的服务中心,使前端应用能更快速的响应多变的市场需求.此时,重点是解决进程间通信问题和提高业务复用及整合的分布式服务框架RPC.</li></ul></li><li><p>流动计算架构</p><ul><li>当服务越来越多,容量的评估,小服务资源的浪费等问题逐渐显现,此时需要增加一个调度中心基于访问实时管理集群容量,提高集群利用率.此时,重点是提高机器利用率的资源调度和治理中心SOA.</li></ul></li></ul><h3 id="2-要解决的问题"><a href="#2-要解决的问题" class="headerlink" title="2. 要解决的问题:"></a>2. 要解决的问题:</h3><ul><li>在大规模服务化之前，应用可能只是通过 RMI 或 Hessian 等工具，简单的暴露和引用远程服务，通过配置服务的URL地址进行调用，通过 F5 等硬件进行负载均衡。当服务越来越多时，服务 URL 配置管理变得非常困难，F5 硬件负载均衡器的单点压力也越来越大。<ul><li>需要服务调用方能自动感知到服务提供方的地址,而对服务提供方进行横向扩展的时候,服务调用方能自动感知到</li><li>因此需要一个服务注册中心，动态地注册和发现服务, 通过消费方获取服务提供方地址列表,实现软负载均衡和 Failover，降低对 F5 硬件负载均衡器的依赖，也能减少部分成本。</li></ul></li><li>解决清晰描述错综复杂的服务依赖关系的问题</li><li>服务的调用量越来越大，服务的容量问题就暴露出来，这个服务需要多少机器支撑？什么时候该加机器？ 为了解决这些问题，第一步，要将服务现在每天的调用量，响应时间，都统计出来，作为容量规划的参考指标。其次，要可以动态调整权重，在线上，将某台机器的权重一直加大，并在加大的过程中记录响应时间的变化，直到响应时间到达阈值，记录此时的访问量，再以此访问量乘以机器数反推总容量。<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://tva1.sinaimg.cn/large/00831rSTgy1gdbo9udlymj30mk0cq7cq.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></li></ul><h2 id="what"><a href="#what" class="headerlink" title="what:"></a>what:</h2><ul><li>一个远程服务调用的分布式框架，调用协议通常包含传输协议和序列化协议。</li><li>Dubbo本身支持多种远程调用方式，例如Dubbo RPC（二进制序列化 + tcp协议）、http invoker（二进制序列化 + http协议）、hessian（二进制序列化 + http协议）、WebServices （文本序列化 + http协议）等。</li></ul><h2 id="架构说明"><a href="#架构说明" class="headerlink" title="架构说明:"></a>架构说明:</h2><ul><li><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://tva1.sinaimg.cn/large/00831rSTgy1gdboappmpdj30ci08cdho.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></li><li><p><a href="https://dubbo.apache.org/zh-cn/docs/user/preface/architecture.html" target="_blank" rel="noopener">官网介绍地址</a></p><h3 id="1-节点角色说明"><a href="#1-节点角色说明" class="headerlink" title="1. 节点角色说明"></a>1. 节点角色说明</h3><table><thead><tr><th>节点</th><th>角色说明</th></tr></thead><tbody><tr><td>Provider</td><td>暴露服务的服务提供方</td></tr><tr><td>Consumer</td><td>调用远程服务的服务消费方</td></tr><tr><td>Registry</td><td>服务注册与发现的注册中心</td></tr><tr><td>Monitor</td><td>统计服务的调用次数和调用时间的监控中心</td></tr><tr><td>Container</td><td>暴露服务的服务提供方</td></tr><tr><td>Consumer</td><td>服务运行容器</td></tr></tbody></table></li></ul><h3 id="2-调用关系说明"><a href="#2-调用关系说明" class="headerlink" title="2. 调用关系说明"></a>2. 调用关系说明</h3><pre><code>1. 服务容器负责启动，加载，运行服务提供者。2. 服务提供者在启动时，向注册中心注册自己提供的服务。3. 服务消费者在启动时，向注册中心订阅自己所需的服务。4. 注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。5. 服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。6. 服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心。</code></pre><h2 id="管理控制台的编译安装："><a href="#管理控制台的编译安装：" class="headerlink" title="管理控制台的编译安装："></a>管理控制台的编译安装：</h2><ul><li>新版管理控制台主要的作用：服务查询，服务治理(包括Dubbo2.7中新增的治理规则)以及服务测试、配置管理<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://tva1.sinaimg.cn/large/00831rSTgy1gdboh1ognhj30ti0b8aax.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤:"></a>步骤:</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 克隆项目到本地，并编译安装和启动（如果是Windows下，则在powershell进行）</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/apache/incubator-dubbo-ops.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切到项目根目录</span></span><br><span class="line"><span class="built_in">cd</span> incubator-dubbo-admin-develop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译构建</span></span><br><span class="line">mvn clean package</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改配置文件，指定注册中心地址</span></span><br><span class="line">dubbo-admin-server/src/main/resources/application-production.properties</span><br><span class="line"></span><br><span class="line">　<span class="comment"># 主要的配置有：</span></span><br><span class="line">　　admin.config-center=zookeeper://127.0.0.1:2181</span><br><span class="line">　　admin.registry.address=zookeeper://127.0.0.1:2181　</span><br><span class="line">　　admin.metadata-report.address=zookeeper://127.0.0.1:2181</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动服务</span></span><br><span class="line"><span class="built_in">cd</span> dubbo-distribution/target</span><br><span class="line">java -jar dubbo-admin-0.1.jar</span><br><span class="line"><span class="comment"># 或以下命令启动服务</span></span><br><span class="line">mvn --projects dubbo-admin-server spring-boot:run</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动完成后，直接访问http://localhost:8080</span></span><br></pre></td></tr></tbody></table></figure></li><li><a href="https://github.com/apache/dubbo-samples/tree/master/java" target="_blank" rel="noopener">官方示例地址</a></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;关于dubbo：&quot;&gt;&lt;a href=&quot;#关于dubbo：&quot; class=&quot;headerlink&quot; title=&quot;关于dubbo：&quot;&gt;&lt;/a&gt;&lt;strong&gt;关于dubbo&lt;/strong&gt;：&lt;/h1&gt;&lt;h2 id=&quot;why&quot;&gt;&lt;a href=&quot;#why&quot; class=&quot;headerlink&quot; title=&quot;why:&quot;&gt;&lt;/a&gt;why:&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;为了解决,随着互联网发展,而日益增长的业务复杂度,网站应用规模不断扩大,且常规的垂直应用架构也无法应付,而提出的解决方案.&lt;/p&gt;&lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;overlay&quot;&gt;&lt;/div&gt;
                    &lt;img src=&quot;https://tva1.sinaimg.cn/large/00831rSTgy1gdbnrp2sl3j30jg05u3z5.jpg&quot; alt=&quot;&quot; title=&quot;&quot;&gt;
                &lt;/div&gt;
                &lt;div class=&quot;image-caption&quot;&gt;&lt;/div&gt;
            &lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
    
      <category term="测试" scheme="https://ym-first.github.io/blog/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://ym-first.github.io/blog/posts/4a17b156/"/>
    <id>https://ym-first.github.io/blog/posts/4a17b156/</id>
    <published>2020-03-09T09:19:26.107Z</published>
    <updated>2020-04-09T01:31:12.380Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/blog/assets/css/APlayer.min.css"><script src="/blog/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
</feed>
